ДЗ №10 (SOLID)
Завдання №2
Розглянемо таку ситуацію: маємо клас Rectangle, сторони якого можна змінювати у програмі. Створимо 
клас Square, що наслідує Ractangle. Прямокутник може змінювати розмірність як за довжиною, так і за
шириною. В той же час, при зміні однієї сторони квадрату на величину k, всі сторони квадрату мають
збільшуватись на цю величину. Тому, якщо ми створимо клас Rectangle із стандартними getter-ом і
setter-ом, отримаємо цілковите порушення побудованої системи. Адже тоді, після зміни однієї сторони 
квадрату (а у нас їх 2, адже ми наслідуємося від прямокутника), наш квадрат перетвориться на прямокутник,
чого ми зовсім не хотіли. Тому така конфігурація в жодному разі не припустима (клас Square в такому 
випадку навіть неможливо назвати квадратом). 
В той же час, звернувшись до формального визначення принципу (Нехай q(x) є властивістю правильною для 
об'єктів x деякого типу T. Тоді q(y) також має бути правильним для об'єктів y типу S, де S — підтип 
типу T.), мені здається, що теоретично сам принцип тут не порушено (хоча, чи має взагалі сенс обговорювати,
чи не порушено його в коді, що зовсім не виконує поставлену умову?)
Тепер розглянемо наступну ситуацію: розуміючи правила зміни розмірності прямокутника та квадрата, ми
могли б більш чітко забезпечити їх виконання в коді. Наприклад, такий код:

	class Rectangle
        {
            public Rectangle()
            {

            }
            public Rectangle(int height, int width)
            {
                _height = height;
                _width = width;
            }
            protected int _height = 1;
            public virtual int Height { get => _height; set
                {
                    if (value <= 0)
                    {
                        throw new ArgumentException();
                    }
                } }
            protected int _width = 1;
            public virtual int Width
            {
                get => _width; set
                {
                    if (value <= 0)
                    {
                        throw new ArgumentException();
                    }
                }
            }

        }
        class Square : Rectangle
        {
            public Square(int side)
            {
                _height=side;
                _width=side;
            }
            public override int Height { get => base._height;
                set 
                { 
                    _height = value;
                    _width = value;
                }
            }
        }

В такому коді ми отримали чітку і правильну реалізацію поставленої умови (при зміні якоїсь сторони
квадрату, автоматично зміниться і друга сторона. Відповідно, квадрат залишиться квадратом). Більше 
того, якщо звернутись до неформального визначення принципу (Функції, які використовують базовий тип, 
повинні мати можливість використовувати підтипи базового типу, не знаючи про це.), можна дійти до 
висновку, що він тут не порушується (принаймні, будь-яка функція зможе використовувати клас Square
замість Rectangle. Плюс до того, єдині дії, що можна виконати над прямокутником це "отримати значення
довжини або ширини" та "одномоментно змінити значення або ширини, або довжини"). Але якщо звернутись 
до формального визначення (згадано вище), принцип підстановки порушується, адже як мінімум властивість
"ширина не змінюється при зміні довжини" не виконується для квадрата. Тому принцип Лісков в даній конфігурації
порушується.
В іншому випадку, коли ми повністю заборонимо змінювати розміри наших фігур, може здатися, що принцип 
не порушується (принаймні дуже багато хто так стверджує в інтернеті), але знов звернувшись до формального 
визначення, адже властивість прямокутника "ширина і довжина можуть бути різними" жодним чином не виконується
для квадрату. Отже, в даному випадку принцип Барбари Лісков теж порушено.

Загалом, наслідування має на меті розширяти базовий клас, а не звужувати його (як це відбувається в нашому
прикладі). Я вважаю, що варто передусім звернути увагу, що квадрат є окремим випадком прямокутника, а не
його конкретизацією, тому ці два об'єкти стоять на одному абстрактному рівні, і їх неможливо наслідувати
один від одного.

//загалом, дуже цікаве завдання, щоб подумати, особливо коли немає світла. Виправте мене, якщо я десь помилився